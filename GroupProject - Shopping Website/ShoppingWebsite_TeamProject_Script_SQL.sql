DROP SEQUENCE LO_PROMOTION_SEQUENCE;

DROP SEQUENCE LO_WISHLIST_SEQUENCE;

DROP SEQUENCE LO_ORDERS_SEQUENCE;

DROP SEQUENCE LO_CART_SEQUENCE;

DROP SEQUENCE LO_PRODUCT_SEQUENCE;

DROP SEQUENCE LO_BRANDID_SEQUENCE;

DROP SEQUENCE LO_USERID_SEQUENCE;

DROP TABLE LO_PROMOTION;

DROP TABLE LO_WISHLIST;

DROP TABLE LO_ORDERS;

DROP TABLE LO_CART;

DROP TABLE LO_PRODUCT;

DROP TABLE LO_BRANDS;

DROP TABLE LO_CUSTOMER;

DROP FUNCTION CHECK_AUTH_USER;

DROP PROCEDURE ADD_WISHLIST;

DROP PROCEDURE ADD_ORDER;

DROP PACKAGE COST;

DROP PACKAGE AUTH;

DROP PACKAGE CARTMANAGE;

DROP TRIGGER UPDATE_PRODUCT_STOCKS;

CREATE TABLE LO_CUSTOMER (
    USERID NUMBER(10) PRIMARY KEY,
    USERNAME VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    USERPASSWORD VARCHAR2(225) NOT NULL
);

CREATE TABLE LO_BRANDS (
    BRANDID NUMBER(10) PRIMARY KEY,
    BRANDNAME VARCHAR2(100) NOT NULL
);

CREATE TABLE LO_PRODUCT (
    PRODUCTID NUMBER(10) PRIMARY KEY,
    PRODUCTNAME VARCHAR2(20),
    PRICE NUMBER(20),
    PRODUCTCOLOR VARCHAR2(20),
    PRODUCTSTOCKS NUMBER(20),
    PRODUCTDESC VARCHAR2(200),
    PRODUCTIMG VARCHAR2(225),
    BRANDID NUMBER(10) REFERENCES LO_BRANDS(BRANDID)
);

CREATE TABLE LO_CART (
    CARTID NUMBER(10) PRIMARY KEY,
    USERID NUMBER(10) REFERENCES LO_CUSTOMER(USERID),
    PRODUCTID NUMBER(10) REFERENCES LO_PRODUCT(PRODUCTID),
    QUANTITY NUMBER(3)
);

CREATE TABLE LO_ORDERS(
    ORDERID NUMBER(10) PRIMARY KEY,
    CARTID NUMBER(10) REFERENCES LO_CART(CARTID),
    USERID NUMBER(10) REFERENCES LO_CUSTOMER(USERID),
    SUBTOTAL NUMBER(10),
    TAX NUMBER(5)
);

CREATE TABLE LO_WISHLIST(
    WISHID NUMBER(10) PRIMARY KEY,
    PRODUCTID NUMBER(10) REFERENCES LO_PRODUCT(PRODUCTID),
    USERID NUMBER(10) REFERENCES LO_CUSTOMER(USERID)
);

CREATE TABLE LO_PROMOTION(
    PROMOID NUMBER(10) PRIMARY KEY,
    PRODUCTID NUMBER(10) REFERENCES LO_PRODUCT(PRODUCTID),
    DISCOUNT NUMBER(3)
);

CREATE SEQUENCE LO_USERID_SEQUENCE START WITH 1 INCREMENT BY 1 MINVALUE 0 MAXVALUE 9999 CYCLE;

CREATE SEQUENCE LO_BRANDID_SEQUENCE
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 9999
CYCLE;

CREATE SEQUENCE LO_PRODUCT_SEQUENCE
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 9999
CYCLE;

CREATE SEQUENCE LO_CART_SEQUENCE
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 9999
CYCLE;

CREATE SEQUENCE LO_ORDERS_SEQUENCE
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 9999
CYCLE;

CREATE SEQUENCE LO_WISHLIST_SEQUENCE
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 9999
CYCLE;

CREATE SEQUENCE LO_PROMOTION_SEQUENCE
START WITH 1
INCREMENT BY 1
MINVALUE 0
MAXVALUE 9999
CYCLE;

CREATE INDEX LO_USER_INDEX
ON LO_CUSTOMER(EMAIL);

--
-- Insert data into LO_CUSTOMER table
INSERT INTO LO_CUSTOMER (
    USERID,
    USERNAME,
    EMAIL,
    USERPASSWORD
) VALUES (
    LO_USERID_SEQUENCE.NEXTVAL,
    'User1',
    'user1@example.com',
    'password1'
);

INSERT INTO LO_CUSTOMER (
    USERID,
    USERNAME,
    EMAIL,
    USERPASSWORD
) VALUES (
    LO_USERID_SEQUENCE.NEXTVAL,
    'User2',
    'user2@example.com',
    'password2'
);

INSERT INTO LO_CUSTOMER (
    USERID,
    USERNAME,
    EMAIL,
    USERPASSWORD
) VALUES (
    LO_USERID_SEQUENCE.NEXTVAL,
    'User3',
    'user3@example.com',
    'password3'
);

INSERT INTO LO_CUSTOMER (
    USERID,
    USERNAME,
    EMAIL,
    USERPASSWORD
) VALUES (
    LO_USERID_SEQUENCE.NEXTVAL,
    'User4',
    'user4@example.com',
    'password4'
);

INSERT INTO LO_CUSTOMER (
    USERID,
    USERNAME,
    EMAIL,
    USERPASSWORD
) VALUES (
    LO_USERID_SEQUENCE.NEXTVAL,
    'User5',
    'user5@example.com',
    'password5'
);

-- Insert data into LO_BRANDS table
INSERT INTO LO_BRANDS (
    BRANDID,
    BRANDNAME
) VALUES (
    LO_BRANDID_SEQUENCE.NEXTVAL,
    'Brand1'
);

INSERT INTO LO_BRANDS (
    BRANDID,
    BRANDNAME
) VALUES (
    LO_BRANDID_SEQUENCE.NEXTVAL,
    'Brand2'
);

INSERT INTO LO_BRANDS (
    BRANDID,
    BRANDNAME
) VALUES (
    LO_BRANDID_SEQUENCE.NEXTVAL,
    'Brand3'
);

INSERT INTO LO_BRANDS (
    BRANDID,
    BRANDNAME
) VALUES (
    LO_BRANDID_SEQUENCE.NEXTVAL,
    'Brand4'
);

INSERT INTO LO_BRANDS (
    BRANDID,
    BRANDNAME
) VALUES (
    LO_BRANDID_SEQUENCE.NEXTVAL,
    'Brand5'
);

-- Insert data into LO_PRODUCT table
INSERT INTO LO_PRODUCT (
    PRODUCTID,
    PRODUCTNAME,
    PRICE,
    BRANDID
) VALUES (
    LO_PRODUCT_SEQUENCE.NEXTVAL,
    'Product1',
    50.00,
    1
);

INSERT INTO LO_PRODUCT (
    PRODUCTID,
    PRODUCTNAME,
    PRICE,
    BRANDID
) VALUES (
    LO_PRODUCT_SEQUENCE.NEXTVAL,
    'Product2',
    75.00,
    2
);

INSERT INTO LO_PRODUCT (
    PRODUCTID,
    PRODUCTNAME,
    PRICE,
    BRANDID
) VALUES (
    LO_PRODUCT_SEQUENCE.NEXTVAL,
    'Product3',
    100.00,
    3
);

INSERT INTO LO_PRODUCT (
    PRODUCTID,
    PRODUCTNAME,
    PRICE,
    BRANDID
) VALUES (
    LO_PRODUCT_SEQUENCE.NEXTVAL,
    'Product4',
    120.00,
    4
);

INSERT INTO LO_PRODUCT (
    PRODUCTID,
    PRODUCTNAME,
    PRICE,
    BRANDID
) VALUES (
    LO_PRODUCT_SEQUENCE.NEXTVAL,
    'Product5',
    80.00,
    5
);

-- Insert data into LO_CART table
INSERT INTO LO_CART (
    CARTID,
    USERID,
    PRODUCTID,
    QUANTITY
) VALUES (
    LO_CART_SEQUENCE.NEXTVAL,
    1,
    1,
    1
);

INSERT INTO LO_CART (
    CARTID,
    USERID,
    PRODUCTID,
    QUANTITY
) VALUES (
    LO_CART_SEQUENCE.NEXTVAL,
    2,
    2,
    2
);

INSERT INTO LO_CART (
    CARTID,
    USERID,
    PRODUCTID,
    QUANTITY
) VALUES (
    LO_CART_SEQUENCE.NEXTVAL,
    3,
    3,
    3
);

INSERT INTO LO_CART (
    CARTID,
    USERID,
    PRODUCTID,
    QUANTITY
) VALUES (
    LO_CART_SEQUENCE.NEXTVAL,
    4,
    4,
    4
);

INSERT INTO LO_CART (
    CARTID,
    USERID,
    PRODUCTID,
    QUANTITY
) VALUES (
    LO_CART_SEQUENCE.NEXTVAL,
    5,
    5,
    5
);

-- Insert data into LO_ORDERS table
INSERT INTO LO_ORDERS (
    ORDERID,
    CARTID,
    USERID,
    SUBTOTAL,
    TAX
) VALUES (
    LO_ORDERS_SEQUENCE.NEXTVAL,
    1,
    1,
    1,
    50.00,
    5
);

INSERT INTO LO_ORDERS (
    ORDERID,
    CARTID,
    USERID,
    SUBTOTAL,
    TAX
) VALUES (
    LO_ORDERS_SEQUENCE.NEXTVAL,
    2,
    2,
    2,
    75.00,
    7.5
);

INSERT INTO LO_ORDERS (
    ORDERID,
    CARTID,
    USERID,
    SUBTOTAL,
    TAX
) VALUES (
    LO_ORDERS_SEQUENCE.NEXTVAL,
    3,
    3,
    3,
    100.00,
    10
);

INSERT INTO LO_ORDERS (
    ORDERID,
    CARTID,
    USERID,
    SUBTOTAL,
    TAX
) VALUES (
    LO_ORDERS_SEQUENCE.NEXTVAL,
    4,
    4,
    4,
    120.00,
    12
);

INSERT INTO LO_ORDERS (
    ORDERID,
    CARTID,
    USERID,
    SUBTOTAL,
    TAX
) VALUES (
    LO_ORDERS_SEQUENCE.NEXTVAL,
    5,
    5,
    5,
    80.00,
    8
);

-- Insert data into LO_WISHLIST table
INSERT INTO LO_WISHLIST (
    WISHID,
    PRODUCTID,
    USERID
) VALUES (
    LO_WISHLIST_SEQUENCE.NEXTVAL,
    1,
    1
);

INSERT INTO LO_WISHLIST (
    WISHID,
    PRODUCTID,
    USERID
) VALUES (
    LO_WISHLIST_SEQUENCE.NEXTVAL,
    2,
    2
);

INSERT INTO LO_WISHLIST (
    WISHID,
    PRODUCTID,
    USERID
) VALUES (
    LO_WISHLIST_SEQUENCE.NEXTVAL,
    3,
    3
);

INSERT INTO LO_WISHLIST (
    WISHID,
    PRODUCTID,
    USERID
) VALUES (
    LO_WISHLIST_SEQUENCE.NEXTVAL,
    4,
    4
);

INSERT INTO LO_WISHLIST (
    WISHID,
    PRODUCTID,
    USERID
) VALUES (
    LO_WISHLIST_SEQUENCE.NEXTVAL,
    5,
    5
);

-- Insert data into LO_PROMOTION table
INSERT INTO LO_PROMOTION (
    PROMOID,
    PRODUCTID,
    DISCOUNT
) VALUES (
    LO_PROMOTION_SEQUENCE.NEXTVAL,
    1,
    10
);

INSERT INTO LO_PROMOTION (
    PROMOID,
    PRODUCTID,
    DISCOUNT
) VALUES (
    LO_PROMOTION_SEQUENCE.NEXTVAL,
    2,
    15
);

INSERT INTO LO_PROMOTION (
    PROMOID,
    PRODUCTID,
    DISCOUNT
) VALUES (
    LO_PROMOTION_SEQUENCE.NEXTVAL,
    3,
    20
);

INSERT INTO LO_PROMOTION (
    PROMOID,
    PRODUCTID,
    DISCOUNT
) VALUES (
    LO_PROMOTION_SEQUENCE.NEXTVAL,
    4,
    5
);

INSERT INTO LO_PROMOTION (
    PROMOID,
    PRODUCTID,
    DISCOUNT
) VALUES (
    LO_PROMOTION_SEQUENCE.NEXTVAL,
    5,
    8
);

CREATE OR REPLACE PACKAGE COST AS

    FUNCTION SUB_TOTAL (
        CARTID_ NUMBER
    ) RETURN NUMBER;

    FUNCTION TOTAL_WITH_TAX (
        CARTID_ NUMBER,
        TAXRATE NUMBER `
    ) RETURN NUMBER;

    FUNCTION TOTAL_AFTER_PROMO (
        CARTID_ NUMBER,
        PROMOID NUMBER
    ) RETURN NUMBER;
END COST;
CREATE OR REPLACE PACKAGE BODY COST AS
 -- sub total
FUNCTION SUB_TOTAL(
    CARTID_ NUMBER
) RETURN NUMBER IS
    SUBTOTAL NUMBER(10) := 0;
BEGIN
    SELECT
        SUM(P.PRICE * LC.QUANTITY) INTO SUBTOTAL
    FROM
        LO_PRODUCT P
        JOIN LO_CART LC
        ON P.PRODUCTID = LC.PRODUCTID
    WHERE
        LC.CARTID = CARTID_;
    RETURN SUBTOTAL;
END;
 -- total with tax
FUNCTION TOTAL_WITH_TAX(
    CARTID_ NUMBER,
    TAXRATE NUMBER
) RETURN NUMBER IS
    TOTAL NUMBER(10);
BEGIN
    TOTAL := SUB_TOTAL(CARTID_) + (SUB_TOTAL(CARTID_) * (TAXRATE/100));
    RETURN TOTAL;
END;
 -- total after promo
FUNCTION TOTAL_AFTER_PROMO(
    CARTID_ NUMBER,
    PROMOID NUMBER
) RETURN NUMBER IS
    TOTALAFTERPROMO NUMBER(10);
    DISCOUNTRATE    NUMBER(3);
BEGIN
    SELECT
        DISCOUNT INTO DISCOUNTRATE
    FROM
        LO_PROMOTION
    WHERE
        PROMOID = PROMOID;
    TOTALAFTERPROMO := SUB_TOTAL(CARTID_) * (1 - DISCOUNTRATE / 100);
    RETURN TOTALAFTERPROMO;
END;
END COST;
 -- add_wishlist
CREATE OR REPLACE

PROCEDURE ADD_WISHLIST(
    P_USERID IN NUMBER,
    P_PRODUCTID IN NUMBER
) IS
    P_COUNT_CHECK NUMBER :=0;
    U_COUNT_CHECK NUMBER :=0;
BEGIN
 -- Check if the product exists
    SELECT
        COUNT(*) INTO P_COUNT_CHECK
    FROM
        LO_PRODUCT
    WHERE
        PRODUCTID = P_PRODUCTID;
    SELECT
        COUNT(*) INTO U_COUNT_CHECK
    FROM
        LO_CUSTOMER
    WHERE
        USERID = P_USERID;
    IF P_COUNT_CHECK <=0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Product does not exist');
    END IF;
 -- Check if the user exists
    IF U_COUNT_CHECK <=0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'User does not exist');
    END IF;
 -- Insert into wishlist
    INSERT INTO LO_WISHLIST (
        WISHID,
        PRODUCTID,
        USERID
    ) VALUES (
        LO_WISHLIST_SEQUENCE.NEXTVAL,
        P_PRODUCTID,
        P_USERID
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END ADD_WISHLIST;
 -- add_order
CREATE OR REPLACE

PROCEDURE ADD_ORDER(
    P_USERID IN NUMBER,
    P_CARTID IN NUMBER,
    P_SUBTOTAL IN NUMBER,
    P_TAX IN NUMBER
) IS
BEGIN
 -- Insert into orders
    INSERT INTO LO_ORDERS (
        ORDERID,
        CARTID,
        USERID,
        SUBTOTAL,
        TAX
    ) VALUES (
        LO_ORDERS_SEQUENCE.NEXTVAL,
        P_CARTID,
        P_USERID,
        P_SUBTOTAL,
        P_TAX
    );
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END ADD_ORDER;
 --
 -- AUTH HEAD
CREATE OR REPLACE PACKAGE AUTH AS

FUNCTION LOGIN(
    P_EMAIL VARCHAR2,
    P_USERPASSWORD VARCHAR2
) RETURN NUMBER;

PROCEDURE SIGNUP(
    NEWUSERNAME VARCHAR2,
    NEWEMAIL VARCHAR2,
    NEWPASSWORD VARCHAR2
);
END AUTH;
 -- AUTH BODY
CREATE OR REPLACE PACKAGE BODY AUTH AS

FUNCTION LOGIN(
    P_EMAIL VARCHAR2,
    P_USERPASSWORD VARCHAR2
) RETURN NUMBER IS
    U_ID    NUMBER;
    U_COUNT NUMBER;
BEGIN
    SELECT
        COUNT(*) INTO U_COUNT
    FROM
        LO_CUSTOMER
    WHERE
        EMAIL = P_EMAIL
        AND USERPASSWORD = P_USERPASSWORD;
    IF U_COUNT = 1 THEN
        SELECT
            USERID INTO U_ID
        FROM
            LO_CUSTOMER
        WHERE
            EMAIL = P_EMAIL
            AND USERPASSWORD = P_USERPASSWORD;
        RETURN U_ID;
    ELSE
        RETURN 0;
    END IF;
END LOGIN;
 -- signup
PROCEDURE SIGNUP(
    NEWUSERNAME VARCHAR2,
    NEWEMAIL VARCHAR2,
    NEWPASSWORD VARCHAR2
) IS
    U_COUNT NUMBER;
BEGIN
 -- Check if the user with the same email already exists
    SELECT
        COUNT(*) INTO U_COUNT
    FROM
        LO_CUSTOMER
    WHERE
        EMAIL = NEWEMAIL;
    IF U_COUNT>0 THEN
 -- Raise an error if the user already exists
        RAISE_APPLICATION_ERROR(-20001, 'User with the same email already exists.');
    ELSE
 -- Insert the new user if the email is unique
        INSERT INTO LO_CUSTOMER (
            USERID,
            USERNAME,
            EMAIL,
            USERPASSWORD
        ) VALUES (
            LO_USERID_SEQUENCE.NEXTVAL,
            NEWUSERNAME,
            NEWEMAIL,
            NEWPASSWORD
        );
        COMMIT;
    END IF;
END SIGNUP;
END AUTH;
 -- Cart Managing
CREATE OR REPLACE PACKAGE CARTMANAGE IS

    PROCEDURE ADDTOCART(
        USERID NUMBER,
        PRODUCTID NUMBER,
        QUANTITY NUMBER
    );

PROCEDURE REMOVEFROMCART(
    USER_ID NUMBER,
    CART_ID NUMBER
);

PROCEDURE UPDATEQUANTITY(
    USERID_ NUMBER,
    CARTID_ NUMBER,
    QUANTITY_ NUMBER
);
END CARTMANAGE;
 -- CARTMANAGE BODY
CREATE OR REPLACE PACKAGE BODY CARTMANAGE IS
    CHECK_USER NUMBER := 0;

PROCEDURE ADDTOCART(
    USERID NUMBER,
    PRODUCTID NUMBER,
    QUANTITY NUMBER
) IS
BEGIN
    SELECT
        COUNT(*) INTO CHECK_USER
    FROM
        LO_CUSTOMER
    WHERE
        USERID = USERID;
    IF CHECK_USER = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'NO USER FOUND!');
    END IF;

    INSERT INTO LO_CART VALUES (
        LO_CART_SEQUENCE.NEXTVAL,
        USERID,
        PRODUCTID,
        QUANTITY
    );
    COMMIT;
END ADDTOCART;

PROCEDURE REMOVEFROMCART(
    USER_ID NUMBER,
    CART_ID NUMBER
) IS
BEGIN
    DELETE FROM LO_CART
    WHERE
        CARTID = CART_ID
        AND USERID = USER_ID;
END REMOVEFROMCART;

PROCEDURE UPDATEQUANTITY(
    USERID_ NUMBER,
    CARTID_ NUMBER,
    QUANTITY_ NUMBER
) IS
BEGIN
    UPDATE LO_CART
    SET
        QUANTITY = QUANTITY_
    WHERE
        CARTID = CARTID_
        AND USERID = USERID_;
    COMMIT;
END UPDATEQUANTITY;
END CARTMANAGE;
 -- Check auth user
CREATE OR REPLACE

FUNCTION CHECK_AUTH_USER(
    USER_ID IN NUMBER
) RETURN NUMBER AS
    USERCOUNT NUMBER:=1;
BEGIN
    SELECT
        COUNT(*) INTO USERCOUNT
    FROM
        LO_CUSTOMER
    WHERE
        USERID=USER_ID;
    RETURN USERCOUNT;
END;
 -- Trigger Updating stock VALUES
CREATE OR REPLACE TRIGGER UPDATE_PRODUCT_STOCKS AFTER INSERT ON LO_CART FOR EACH ROW BEGIN UPDATE LO_PRODUCT SET PRODUCTSTOCKS = PRODUCTSTOCKS - :NEW.QUANTITY WHERE PRODUCTID = :NEW.PRODUCTID;
END;
 --
 -- TESTINGS
 -- TRIGGER (UPDATE_PRODUCT_STOCKS)
INSERT INTO LO_CART(CARTID, USERID, PRODUCTID, QUANTITY ) VALUES(LO_CART_SEQUENCE.NEXTVAL, 1, 1, 50);
 --
 -- PACKAGE_AUTH (AUTH.LOGIN(:EMAIL, :PASSWORD))
DECLARE STATUS_AUTH NUMBER;
BEGIN
    STATUS_AUTH := AUTH.LOGIN('user1@example.com', 'password1');
    IF STATUS_AUTH = 0 THEN
        DBMS_OUTPUT.PUT_LINE('FAIL');
    ELSE
        DBMS_OUTPUT.PUT_LINE('SUCCESS');
    END IF;
END;
 --
 --  PACKAGE_AUTH (AUTH.SIGNUP(:USERNAME,:EMAIL, :PASSWORD))
BEGIN
    AUTH.SIGNUP('test', 'test1@gmail.com', '2142resfse');
END;
 -- PACKAGE_COST (COST.SUB_TOTAL(CARTID))
SELECT
    CARTID,
    COST.SUB_TOTAL(CARTID) SUB_TOTAL
FROM
    LO_CART;
 -- PACKAGE_COST (COST.TOTAL_WITH_TAX(CARTID,TAXRATE))
SELECT
    CARTID,
    COST.TOTAL_WITH_TAX(CARTID, 13) SUB_TOTAL
FROM
    LO_CART;
 -- PACKAGE_COST (COST.TOTAL_AFTER_PROMO(CARTID,PROMOID))
SELECT
    CARTID,
    COST.TOTAL_WITH_TAX(CARTID, 1) SUB_TOTAL
FROM
    LO_CART
WHERE
    CARTID=1;
 -- PROCEDURE_ADD_WISHLIST(P_USERID, P_PRODUCTID)
BEGIN
    ADD_WISHLIST(1, 1);
END;

SELECT
    *
FROM
    LO_WISHLIST
WHERE
    USERID=1;
 -- PACKAGE_CARTMANAGE (CARTMANAGE.ADDTOCART(userid, productid, quantity))
BEGIN
    CARTMANAGE.ADDTOCART(1, 1, 1);
END;
 -- PACKAGE_CARTMANAGE (CARTMANAGE.removefromcart(userid, cartid))
BEGIN
    CARTMANAGE.REMOVEFROMCART(1, 28);
END;
 -- PACKAGE_CARTMANAGE (CARTMANAGE.UPDATEQUANTITY(userid, cartid,quantity))
BEGIN
    CARTMANAGE.UPDATEQUANTITY(1, 1, 8);
END;
 -- FUNCTION_CHECK_AUTH_USER(userid)
BEGIN
    IF CHECK_AUTH_USER(2)=0 THEN
        DBMS_OUTPUT.PUT_LINE('User does not exist');
    ELSE
        DBMS_OUTPUT.PUT_LINE('User exist');
    END IF;
END;
 -- PROCEDURE_ADD_ORDER(userid, productid, cartid, subtotal, tax)
DECLARE
    SUBT NUMBER;
    TAX  NUMBER;
BEGIN
    SUBT := COST.SUB_TOTAL(1);
    TAX := COST.TOTAL_WITH_TAX(1, 13)-SUBT;
    ADD_ORDER(1, 1, SUBT, TAX );
END;